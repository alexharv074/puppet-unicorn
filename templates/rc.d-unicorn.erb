#!/bin/sh
# Managed by Puppet

# PROVIDE: unicorn_<%= @name %>
# REQUIRE: LOGIN cleanvar
# KEYWORD: shutdown

#
# unicorn_<%= @name %>_enable (bool):
#

. /etc/rc.subr

name="unicorn_<%= @name %>"
rcvar=unicorn_<%= @name %>_enable

load_rc_config "${name}"

: ${unicorn_<%= @name %>_enable:="NO"}

read_command_interpreter() {
	read _interp < $1
	case "$_interp" in
	\#!*)
		_interp=${_interp#\#!}
		set -- $_interp
		case $1 in
		*/bin/env)
			shift
			;;
		esac
		;;
	esac

	echo $1
}

command="<%= @daemon %>"
command_args="<%= @daemon_opts %>"
command_interpreter=$(read_command_interpreter $command)
procname="unicorn" # will warn about not being able to read interpreter :(

pidfile="<%= @pidfile %>"
required_files="<%= @config %>"
required_dirs="<%= @approot %>"

extra_commands="reload reopenlogs"
reopenlogs_cmd="unicorn_reopen_logs"
reload_cmd="unicorn_reload"
start_precmd="unicorn_environment"

unicorn_<%= @name %>_chdir="<%= @approot %>"
<% if @user != 'root' -%>
unicorn_<%= @name %>_user="<%= @user %>"
<% end -%>
<% if @group != '0' && @group != 'wheel' -%>
unicorn_<%= @name %>_group="<%= @group %>"
<% end -%>

unicorn_reload() {
	ret=1
	kill -USR2 $rc_pid 2>/dev/null

	for second in $(jot 15); do
		sleep 1
		kill -0 $rc_pid 2>/dev/null
		if [ $? -eq '1' ]; then
			ret=0
			break
		fi
	done

	return $ret
}

unicorn_reopen_logs() {
	kill -USR1 $rc_pid 2>/dev/null
 	return $?
}

unicorn_contains() {
	_needle=$1
	_haystack=$2

	case "${_haystack}" in
	*${_needle}*)
		return 0
		;;
	*)
		return 1
		;;
	esac
}

unicorn_append_command_paths() {
	local _command
	local _command_path
	local _command_interp

	_command=$command
	_command_interp=$command_interpreter

	# Add the path to $command to PATH
	_command_path=$(dirname $_command)
	unicorn_contains $_command_path $PATH || export PATH=$PATH:$_command_path

	# Add the interpreter path of $command to PATH
	if [ -n $_command_interp -a -r $_command_interp ]; then
		_command_path=$(dirname $_command_interp)
		unicorn_contains $_command_path $PATH || export PATH=$PATH:$_command_path
	fi

	return 0
}

unicorn_bundle_gemfile() {
	local _chdir
	local _dirs

	eval _chdir=\$${name}_chdir
	_dirs=${required_dirs}
	unicorn_contains "${_chdir}" "${_dirs}" || _dirs="${_dirs} ${_chdir}"

	for _dir in ${_dirs}; do
		debug "Checking $_dir for Gemfile"
		test -f "${_dir}/Gemfile" && export BUNDLE_GEMFILE="${_dir}/Gemfile"
	done

	return 0
}

unicorn_environment() {
	unicorn_append_command_paths &&
	unicorn_bundle_gemfile
	return $?
}

run_rc_command "$1"
